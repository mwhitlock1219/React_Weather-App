{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","getTime","zone","tz","lookup","zip","now","Moment","format","setState","time","getWeather","zipInput","document","getElementById","value","fetch","then","response","status","json","data","console","log","temperature","Math","round","main","temp","city","name","description","weather","timezone","country","sys","lat","coord","long","lon","catch","err","className","type","placeholder","id","onClick","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yQAiGeA,E,4MA3FbC,MAAQ,G,EAERC,QAAU,WACR,IAAMC,EAAOC,IAAGC,OAAO,EAAKJ,MAAMK,KAC5BC,EAAMC,MAASJ,GAAGD,GAAMM,OAAO,iCAErC,EAAKC,SAAS,CAEZC,KAAMJ,K,EAIVK,WAAa,WACX,IAAMC,EAAWC,SAASC,eAAe,YAAYC,MAErDC,MAEE,uDACEJ,EACA,6DAEDK,MAAK,SAACC,GAEmB,MAApBA,EAASC,OAObD,EAASE,OAAOH,MAAK,SAACI,GAEpBC,QAAQC,IAAIF,GACZ,EAAKZ,SAAS,CAEZJ,IAAKO,EACLY,YAAaC,KAAKC,MAAML,EAAKM,KAAKC,MAAQ,QAC1CC,KAAMR,EAAKS,KACXC,YAAaV,EAAKW,QAAQ,GAAGD,YAC7BE,SAAUZ,EAAKY,SACfC,QAASb,EAAKc,IAAID,QAClBE,IAAKf,EAAKgB,MAAMD,IAChBE,KAAMjB,EAAKgB,MAAME,MAEnB,EAAKtC,aApBLqB,QAAQC,IACN,gDAAkDL,EAASC,WAsBhEqB,OAAM,SAAUC,GAEfnB,QAAQC,IAAI,kBAAmBkB,O,uDAMnC,OACE,yBAAKC,UAAU,OACb,8BACE,yBAAKA,UAAU,cACb,2BACEC,KAAK,OACLD,UAAU,aACVE,YAAY,sBACZC,GAAG,aAEL,4BAAQH,UAAU,gBAAgBI,QAASC,KAAKpC,YAAhD,WAKF,yBAAK+B,UAAU,gBACb,yBAAKA,UAAU,WAAWG,GAAG,QAC1BE,KAAK/C,MAAM6B,KADd,KACsBkB,KAAK/C,MAAMkC,SAEjC,yBAAKQ,UAAU,QAAQK,KAAK/C,MAAMU,OAGpC,yBAAKgC,UAAU,eACb,yBAAKA,UAAU,OAAOG,GAAG,eACtBE,KAAK/C,MAAMwB,aAEd,yBAAKkB,UAAU,UAAUG,GAAG,eACzBE,KAAK/C,MAAM+B,oB,GAnFRiB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3C,SAASC,eAAe,SDyHpB,kBAAmB2C,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLxC,QAAQwC,MAAMA,EAAMC,a","file":"static/js/main.16b5f6c6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Moment from \"moment\";\nimport \"moment-timezone\";\nimport tz from \"zipcode-to-timezone\";\n\nclass App extends Component {\n  state = {}; // leave blank because you'll be getting this info from your fetch and then setting it as state\n\n  getTime = () => {\n    const zone = tz.lookup(this.state.zip); //uses \"zipcode-to-timezone\" to find the timezone of the zip that has been fetched\n    const now = Moment().tz(zone).format(\"dddd, MMMM Do YYYY, h:mm:ss a\"); // uses \"moment\" to find date&time of call then timezone in input using variable above then eveything is fomatted to  look nice\n\n    this.setState({\n      // sets as state to call back in render\n      time: now,\n    });\n  };\n\n  getWeather = () => {\n    const zipInput = document.getElementById(\"zipInput\").value; //making the input of user a variable to fetch api\n\n    fetch(\n      // fetching api data using user input (zipInput)\n      \"https://api.openweathermap.org/data/2.5/weather?zip=\" +\n        zipInput +\n        \",us&appid=c65692185192c2852cfc0a2ec9095d2a&units=imperial\" // api key and converting info to metric\n    )\n      .then((response) => {\n        // if there is an error in getting the response then this will print in th e console\n        if (response.status !== 200) {\n          console.log(\n            \"Looks like there was a problem. Status Code: \" + response.status\n          );\n          return;\n        }\n\n        response.json().then((data) => {\n          //changes data from json to strings\n          console.log(data); // use to look through data object to figure out path to info\n          this.setState({\n            // setting the different states to call on later in render\n            zip: zipInput,\n            temperature: Math.round(data.main.temp) + \"Â°F\",\n            city: data.name,\n            description: data.weather[0].description,\n            timezone: data.timezone,\n            country: data.sys.country,\n            lat: data.coord.lat,\n            long: data.coord.lon,\n          });\n          this.getTime(); //calls function\n        });\n      })\n      .catch(function (err) {\n        // if there is a error after fetching the data from the api this message will appear.\n        console.log(\"Fetch Error :-S\", err);\n      });\n  };\n\n  render() {\n    // code is exported and rendered on html./ className= class in css/ {} used to input states declared in component\n    return (\n      <div className=\"app\">\n        <main>\n          <div className=\"search-box\">\n            <input\n              type=\"text\"\n              className=\"search-bar\"\n              placeholder=\" Enter Zipcode Here\"\n              id=\"zipInput\"\n            />\n            <button className=\"search-button\" onClick={this.getWeather}>\n              Search\n            </button>\n          </div>\n\n          <div className=\"location-box\">\n            <div className=\"location\" id=\"city\">\n              {this.state.city}, {this.state.country}\n            </div>\n            <div className=\"date\">{this.state.time}</div>\n          </div>\n\n          <div className=\"weather-box\">\n            <div className=\"temp\" id=\"temperature\">\n              {this.state.temperature}\n            </div>\n            <div className=\"weather\" id=\"description\">\n              {this.state.description}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}